package com.edgar.jdbc.codegen.gen;

import com.google.common.base.CharMatcher;
import com.google.common.base.Joiner;
import com.google.common.collect.Iterables;

import com.edgar.jdbc.codegen.CodegenOptions;
import com.edgar.jdbc.codegen.db.Table;

import java.util.List;

/**
 * Created by Edgar on 2016/4/1.
 *
 * @author Edgar  Date 2016/4/1
 */
public interface SourceGen {

  String COMMENT_START = "/* START 写在START和END中间的代码不会被替换*/";

  String COMMENT_END = "/* END 写在START和END中间的代码不会被替换*/";

  String IS_COMMENT_START = "/* START";

  String IS_COMMENT_END = "/* END";

  String gen(Domain domain, CodegenOptions options);

  default void printPackage(StringBuffer sourceBuf, String packageName) {
    sourceBuf.append("package " + packageName + ";\n\n");
  }

  default void printImports(StringBuffer sourceBuf, List<String> imports) {
    imports.forEach(importClass -> sourceBuf.append("import " + importClass + ";\n"));
  }

  default void printClassComments(StringBuffer sourceBuf) {
    sourceBuf.append("\n/**\n");
    sourceBuf.append(" * This class is generated by Jdbc code generator.\n");
    sourceBuf.append(" *\n");
    sourceBuf.append(" * @author Jdbc Code Generator\n");
    sourceBuf.append(" */\n");
  }

  default void printClassDefn(StringBuffer sourceBuf, String className) {
    sourceBuf.append("public class " + className);
  }

  default void printClassExtends(StringBuffer sourceBuf, List<String> extendsClassNames) {
    if (!extendsClassNames.isEmpty()) {
      sourceBuf.append(" extends ");
      Iterable<String> interfaceClasses = Iterables.transform(extendsClassNames,
                                                              input -> input.substring(
                                                                      CharMatcher.anyOf(".")
                                                                              .lastIndexIn
                                                                                      (input) + 1));
      sourceBuf.append(Joiner.on(",").join(interfaceClasses));
    }
    sourceBuf.append(" ");
  }

  default void printClassImplements(StringBuffer sourceBuf, List<String> interfaceNames) {
    if (!interfaceNames.isEmpty()) {
      sourceBuf.append(" implements ");
      Iterable<String> interfaceClasses = Iterables.transform(interfaceNames,
                                                              input -> input.substring(
                                                                      CharMatcher.anyOf(".")
                                                                              .lastIndexIn
                                                                                      (input) + 1));
      sourceBuf.append(Joiner.on(",").join(interfaceClasses));
    }
    sourceBuf.append(" ");
  }

  default void printOpenBrace(StringBuffer sourceBuf, int indentLevel, int newLines) {
    for (int i = 0; i < indentLevel; i++) {
      sourceBuf.append("\t");
    }
    sourceBuf.append("{");
    if (newLines == 0)
      newLines = 1; // add atleast 1 new line
    for (int i = 0; i < newLines; i++) {
      sourceBuf.append("\n");
    }
  }

  default void printCloseBrace(StringBuffer sourceBuf,  int indentLevel, int newLines) {
    for (int i = 0; i < indentLevel; i++) {
      sourceBuf.append("\t");
    }
    sourceBuf.append("}");
    for (int i = 0; i < newLines; i++) {
      sourceBuf.append("\n");
    }
  }
}
